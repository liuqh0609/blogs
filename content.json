{"meta":{"title":"火热","subtitle":"","description":"你我山巅自相逢，予你与我遇清风","author":"火热","url":"https://blog.lqh.kim","root":"/"},"pages":[{"title":"","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"404.html","permalink":"https://blog.lqh.kim/404.html","excerpt":"","text":""},{"title":"","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"about/index.html","permalink":"https://blog.lqh.kim/about/index.html","excerpt":"","text":"对生活保持热爱对知识保持敬畏"},{"title":"所有分类","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"categories/index.html","permalink":"https://blog.lqh.kim/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"tags/index.html","permalink":"https://blog.lqh.kim/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"时间复杂度&空间复杂度","slug":"时间复杂度&空间复杂度","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"2021/02/04/时间复杂度&空间复杂度/","link":"","permalink":"https://blog.lqh.kim/2021/02/04/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"时间复杂度&amp;空间复杂度复杂度的作用一般我们会从两个维度去考虑一段代码的质量： 时间复杂度 空间复杂度 顾名思义，其实时间复杂度就是说这段代码的计算量所能消耗的时间，而空间复杂度就是这段代码所占据的内存空间。 所以时间复杂度和空间复杂度一般是用来衡量一段代码的优劣的。 那么我们应该怎么来定义复杂度呢？ 复杂度的定义与特点定义 复杂度是一个关于输入量 n 的函数。eg：假设你的代码复杂度是 f(n),那么用大写字母 O 将其括起来就可以表示复杂度了 — O(f(n)) 特点与常系数无关 例如 O(n) + O(n) = O(2n), 其实 O(n)复杂度和 O(2n)复杂度是一样的，我们通常会忽略常系数对复杂度的影响 多项式级相加的复杂度，会取结果最大的那一个作为最后的结果 O(n^2) + O(n)，明显 n^2 在输入量 n 逐渐变大的情况下，变化会更大，所以我们就说复杂度是 O(n^2)即可 O(1)是一个特殊的复杂度：输入量 n 与消耗的资源无关 O（1）表示的是当前复杂度和输入 n 无关。例如你的代码处理 100 条数据是消耗 3 个时间单元和 1 个空间单元，处理 500 条数据依然还是消耗 3 个时间单元和 1 个空间单元，那么就是输入量与消耗资源无 案例分析O(1)12let num = 0;num += 1; 时间复杂度：O(1)空间复杂度：O(1) O(n)123for (let i = 0; i++; i &lt; n) &#123; console.log(i);&#125; 时间复杂度：O(n)空间复杂度：O(1) 单个变量所占的空间永远都是一个常量所以是 O(1) 1234const arr = [];for (let i = 0; i++; i &lt; n) &#123; arr.push(i);&#125; 时间复杂度：O(n)空间复杂度：O(n) 这段代码相当于我们给数组 arr 中添加了 n 个元素，所以占用了 n 个内存单元，因此空间复杂度为 O(n) O(logn)1234let i = 1;while (i &lt;= n) &#123; i *= 2;&#125; 时间复杂度：O(n)空间复杂度：O(1) 这段代码相当于是在计算 2&lt;=n，也就是 x 次之后循环结束那么 x=logn","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"代码效率优化方法论","slug":"代码效率优化方法论","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"2021/02/04/代码效率优化方法论/","link":"","permalink":"https://blog.lqh.kim/2021/02/04/%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E8%AE%BA/","excerpt":"","text":"代码效率优化方法论如何衡量一段代码的优劣呢？一般我们会从两个维度去考虑一段代码的质量： 时间复杂度 空间复杂度 顾名思义，其实时间复杂度就是说这段代码的计算量所能消耗的时间，而空间复杂度就是这段代码所占据的内存空间。那么我们应该怎么取舍这两个标准呢？ 提高代码效率的方法我们从上面已经知道了衡量代码效率的方法，那么我们应该怎么着手去优化提高我们代码的效率呢？ 总的策略就是降低代码的时间复杂度和空间复杂度。 但是对于一段代码来说往往时间和空间两个是互斥的，如果我们想要降低时间复杂度，那么无疑就会增加空间复杂度。举一个生活中的 🌰，就像我们平时生活中开车过红绿灯，如果只有这一条路（空间）那么我们就只能在这等着红灯，当车越来越多的时候，就会消耗大家很多时间，但是当我们修建了立交桥之后，就会有更多的选择空间，就会大大减少等待红灯的时间。（图片来自拉钩教育-公瑾老师的重学算法与数据结构一课中）而对我们来说，时间永远都要比空间更加重要，因为时间拿钱买不来，而空间我们起码可以拿钱来进行扩容。空间是廉价的，时间是昂贵的 暴力解法：在没有任何时间和空间的限制下，将目标达成 剔除无效操作：将代码中没有必要的计算、无效的存储删除来优化时间和空间复杂度 时空转换：设计合理的数据结构，将时间向空间转换 增删查：数据的基本操作一般一段算法的实现最常设计的三个操作就是：增、删、查。而我们对一个算法的优化和实现只要围绕这三个为重心去思考展开即可： 分析这段代码对数据进行了那些操作 这些操作中有哪些操作是最消耗性能的，对时间复杂度的损耗是最高的？ 考虑有哪种数据结构可以帮助提高数据操作的使用效率。 以上三点就是构成我们实现代码效率优化的方法论。 查 按照元素索引查找 对于数组这些天生拥有索引的数据结构来说十分简单 对于链表这种，通过指针进行连接的就需要知道前面一个元素 按照元素特征值查找 对于字典类型的数据来说，key 就相当是特征，value 就是值，查找起来非常方便 对于数组和链表来说就需要循环对比每个元素来进行比较值的特征是否符合 增 在复杂数据结构的末尾添加数据 不会影响数据的原始位置 在复杂数据结构的中间添加数据 会影响到数据原始的位置 删 在复杂数据结构的末尾删除 不会影响到原先数据的位置 在复杂数据结构的中间位置进行删除 会影响到之前数据的原始位置","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"栈 - 基础知识","slug":"栈","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"2021/02/04/栈/","link":"","permalink":"https://blog.lqh.kim/2021/02/04/%E6%A0%88/","excerpt":"","text":"栈 定义一种后进先出的数据结构。 类似于一个麻袋，先装进去的就在袋子的最底部，所以只能先拿出来最上面的 名词解释push： 入栈pop： 出栈top：栈顶JavaScript 中的栈在 js 中是没用栈这种数据结构的，不过我们可以利用数组来模拟。而且在 js 中也是有对应的 push 和 pop 方法的: push: 向数组末尾添加一个元素，返回值是数组的长度pop：移除数组的第一个元素，返回值是移除的元素 什么场景下用栈？ 最直白的讲就是需要后进先出的场景 十进制转二进制我们计算十进制转二进制时，就是不断除以 2，然后取余数然后将最后一位的余数与第一位的余数拼成二进制 这样的后进先出的手法有没有想到栈！ 判断字符串的括号是否有效我们验证括号是否有效其实就是在验证是不是能够凑齐一对完整的闭合括号。 而且我们可以发现一个规律，越靠左的左括号，它对应的右括号就越靠右。反之也就是最后面的左括号，对应的必定是出现的第一个右括号。 所以我们就可以在遇到左括号时就入栈，遇到右括号时就与栈顶的括号就行配对比较，若果符合配对规则则出栈，否则就不符合规则直接判定无效。匹配到最后结如果栈内是空就证明可以完整闭合 函数调用栈等这个可以看浏览器，js 的解释器就是通过调用栈的形式实现的 执行 fun1 时先将 fun1 入栈，然后调用 fun2，入栈；然后调用 fun3 入栈。 fun3 执行完毕出栈fun2 执行完毕出栈fun1 执行完毕出栈程序执行完毕","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"栈 - 基础知识","slug":"测试","date":"2021-02-04T06:02:15.747Z","updated":"2021-02-04T06:02:15.747Z","comments":true,"path":"2021/02/04/测试/","link":"","permalink":"https://blog.lqh.kim/2021/02/04/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"测试首页图片是否能正常显示以及文章描述","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]},{"title":"使用Hexo+Github Action+腾讯云函数+yuque-hexo打造自动化博客部署方案","slug":"yuque/使用Hexo+Github Action+腾讯云函数+yuque-hexo打造自动化博客部署方案","date":"2021-02-04T05:56:33.000Z","updated":"2021-02-04T06:02:37.683Z","comments":true,"path":"2021/02/04/yuque/使用Hexo+Github Action+腾讯云函数+yuque-hexo打造自动化博客部署方案/","link":"","permalink":"https://blog.lqh.kim/2021/02/04/yuque/%E4%BD%BF%E7%94%A8Hexo+Github%20Action+%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B0+yuque-hexo%E6%89%93%E9%80%A0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/","excerpt":"tags: [hexo, github]categories: [fe]cover: https://cdn.nlark.com/yuque/0/2021/png/2705850/1612418500562-e844caa3-bb3e-4b5d-8b27-573fd7f1d7ab.png 本文将会一步一步的带你打造一套自动化部署的博客系统。从语雀发布文章后自动同步到 Github page 的静态博客。","text":"tags: [hexo, github]categories: [fe]cover: https://cdn.nlark.com/yuque/0/2021/png/2705850/1612418500562-e844caa3-bb3e-4b5d-8b27-573fd7f1d7ab.png 本文将会一步一步的带你打造一套自动化部署的博客系统。从语雀发布文章后自动同步到 Github page 的静态博客。 Hexo 创建静态博客好第一步就这样完成了 Github Action + yuque-hexo 实现 CI 流程接下来我们进行第二步…恩，第二步也快了的完成了，那我们继续第三部吧~ 腾讯云函数监听语雀事件触发 Action大功告成，来在语雀上试一下把~","categories":[],"tags":[]},{"title":"语雀测试文档","slug":"yuque/语雀测试文档","date":"2021-02-03T13:31:17.000Z","updated":"2021-02-04T06:02:37.687Z","comments":true,"path":"2021/02/03/yuque/语雀测试文档/","link":"","permalink":"https://blog.lqh.kim/2021/02/03/yuque/%E8%AF%AD%E9%9B%80%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"栈","slug":"yuque/栈","date":"2021-02-02T03:35:18.000Z","updated":"2021-02-04T06:02:37.823Z","comments":true,"path":"2021/02/02/yuque/栈/","link":"","permalink":"https://blog.lqh.kim/2021/02/02/yuque/%E6%A0%88/","excerpt":"","text":"定义一种后进先出的数据结构。 类似于一个麻袋，先装进去的就在袋子的最底部，所以只能先拿出来最上面的 名词解释push： 入栈pop： 出栈top：栈顶JavaScript 中的栈在 js 中是没用栈这种数据结构的，不过我们可以利用数组来模拟。而且在 js 中也是有对应的 push 和 pop 方法的: push: 向数组末尾添加一个元素，返回值是数组的长度pop：移除数组的第一个元素，返回值是移除的元素 什么场景下用栈？ 最直白的讲就是需要后进先出的场景 十进制转二进制我们计算十进制转二进制时，就是不断除以 2，然后取余数然后将最后一位的余数与第一位的余数拼成二进制 这样的后进先出的手法有没有想到栈！ 判断字符串的括号是否有效我们验证括号是否有效其实就是在验证是不是能够凑齐一对完整的闭合括号。 而且我们可以发现一个规律，越靠左的左括号，它对应的右括号就越靠右。反之也就是最后面的左括号，对应的必定是出现的第一个右括号。 所以我们就可以在遇到左括号时就入栈，遇到右括号时就与栈顶的括号就行配对比较，若果符合配对规则则出栈，否则就不符合规则直接判定无效。匹配到最后结如果栈内是空就证明可以完整闭合 函数调用栈等这个可以看浏览器，js 的解释器就是通过调用栈的形式实现的 执行 fun1 时先将 fun1 入栈，然后调用 fun2，入栈；然后调用 fun3 入栈。 fun3 执行完毕出栈fun2 执行完毕出栈fun1 执行完毕出栈程序执行完毕","categories":[],"tags":[]},{"title":"时间复杂度&空间复杂度","slug":"yuque/时间复杂度&空间复杂度","date":"2021-02-01T23:09:37.000Z","updated":"2021-02-04T06:02:37.883Z","comments":true,"path":"2021/02/02/yuque/时间复杂度&空间复杂度/","link":"","permalink":"https://blog.lqh.kim/2021/02/02/yuque/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"复杂度的作用一般我们会从两个维度去考虑一段代码的质量： 时间复杂度 空间复杂度 顾名思义，其实时间复杂度就是说这段代码的计算量所能消耗的时间，而空间复杂度就是这段代码所占据的内存空间。 所以时间复杂度和空间复杂度一般是用来衡量一段代码的优劣的。 那么我们应该怎么来定义复杂度呢？ 复杂度的定义与特点定义 复杂度是一个关于输入量 n 的函数。eg：假设你的代码复杂度是 f(n),那么用大写字母 O 将其括起来就可以表示复杂度了 — O(f(n)) 特点与常系数无关 例如 O(n) + O(n) = O(2n), 其实 O(n)复杂度和 O(2n)复杂度是一样的，我们通常会忽略常系数对复杂度的影响 多项式级相加的复杂度，会取结果最大的那一个作为最后的结果 O(n^2) + O(n)，明显 n^2 在输入量 n 逐渐变大的情况下，变化会更大，所以我们就说复杂度是 O(n^2)即可 O(1)是一个特殊的复杂度：输入量 n 与消耗的资源无关 O（1）表示的是当前复杂度和输入 n 无关。例如你的代码处理 100 条数据是消耗 3 个时间单元和 1 个空间单元，处理 500 条数据依然还是消耗 3 个时间单元和 1 个空间单元，那么就是输入量与消耗资源无 案例分析O(1)12let num = 0;num += 1; 时间复杂度：O(1)空间复杂度：O(1) O(n)123for (let i = 0; i++; i &lt; n) &#123; console.log(i);&#125; 时间复杂度：O(n)空间复杂度：O(1) 单个变量所占的空间永远都是一个常量所以是 O(1) 1234const arr = [];for (let i = 0; i++; i &lt; n) &#123; arr.push(i);&#125; 时间复杂度：O(n)空间复杂度：O(n) 这段代码相当于我们给数组 arr 中添加了 n 个元素，所以占用了 n 个内存单元，因此空间复杂度为 O(n) O(logn)1234let i = 1;while (i &lt;= n) &#123; i *= 2;&#125; 时间复杂度：O(n)空间复杂度：O(1) 这段代码相当于是在计算 2&lt;=n，也就是 x 次之后循环结束那么 x=logn","categories":[],"tags":[]},{"title":"[红宝书质检厂]看看读完红宝书的你，到底学废了吗？","slug":"yuque/[红宝书质检厂]看看读完红宝书的你，到底学废了吗？","date":"2021-01-25T23:20:11.000Z","updated":"2021-02-04T06:02:37.907Z","comments":true,"path":"2021/01/26/yuque/[红宝书质检厂]看看读完红宝书的你，到底学废了吗？/","link":"","permalink":"https://blog.lqh.kim/2021/01/26/yuque/[%E7%BA%A2%E5%AE%9D%E4%B9%A6%E8%B4%A8%E6%A3%80%E5%8E%82]%E7%9C%8B%E7%9C%8B%E8%AF%BB%E5%AE%8C%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%9A%84%E4%BD%A0%EF%BC%8C%E5%88%B0%E5%BA%95%E5%AD%A6%E5%BA%9F%E4%BA%86%E5%90%97%EF%BC%9F/","excerpt":"","text":"对于技术类的书籍，我认为我们在阅读的时候应该是带着问题又目的性的阅读，当我们读完一个章节或者一部分之后就回头问问自己是否了解或者掌握了这其中的知识点，以问题的形式来回顾和检查自己的理解程度。 本篇文章我就以这种角度来带大家检查一下自己阅读红宝书的质量到底如何 第一章你眼里的 JavaScript 是什么？在前端的远古时代（95 年之前）为了验证一个输入字段是否有效，就需要与服务器进行一次往返的通信，极其浪费时间。而 JavaScript 当时的出现就是为了解决这种前端的数据验证问题，但是随着自身的发展，现在 Js 能做的事情已经越来越多了，也就成为了现在我们所认识的主流编程语言。完整的 JavaScript 由 3 部分组成： ECMAScript DOM BOM 那你能分别介绍一下这三部分吗？ECMAScript：由国际标准化组织制定的一种标准，定义了这门语言的一些词法、语法和类型等一系列的标准DOM：全称是 Document Object Model，也就是文档对象模型，是用来让我们对 HTML 文档中的元素结构进行增删改查的BOM：Brower Object Model，浏览器对象模型，实现了一系列的浏览器 API，以方便我们去操作浏览器相关的操作，常用的有 window 对象，navigator 对象，XMLRequest，操作 Cookie 的等等 思维导图 第二章能说一下 script 标签的 defer 和 async 属性吗？上面你提到的 load 和 DOMContentLoad 事件能解释一下吗？思维导图","categories":[],"tags":[]},{"title":"标签语义化","slug":"yuque/标签语义化","date":"2020-12-29T23:25:07.000Z","updated":"2021-02-04T06:02:37.915Z","comments":true,"path":"2020/12/30/yuque/标签语义化/","link":"","permalink":"https://blog.lqh.kim/2020/12/30/yuque/%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89%E5%8C%96/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"动画与绘制","slug":"yuque/动画与绘制","date":"2020-12-27T13:02:11.000Z","updated":"2021-02-04T06:02:37.967Z","comments":true,"path":"2020/12/27/yuque/动画与绘制/","link":"","permalink":"https://blog.lqh.kim/2020/12/27/yuque/%E5%8A%A8%E7%94%BB%E4%B8%8E%E7%BB%98%E5%88%B6/","excerpt":"","text":"Animation @keyframes 定义 可以使用百分比表示进度 也可以使用 from、to 1234567@keyframes mykf&#123; form&#123; background: red &#125; to&#123; background: blue &#125; animation：使用 animation-name 动画名称 animation-duration 动画的时长 animation-timing-function 动画的时间曲线 贝塞尔曲线：https://cubic-bezier.com/#.17,.67,.83,.67 一次贝塞尔曲线（直线） 二次贝塞尔曲线 三次贝塞尔曲线（常用） animation-delay 动画开始前的延迟 animation-iteration-count 动画的播放次数 animation-rirection 动画的方向 transition transition-property 需要变换的属性 transition-duration 变换的时长 transition-timing-function 时间曲线 transition-delay 延迟 颜色在自然界中我们看到的光都是混色光，极少有纯色光（激光笔可以达到纯色光）正常人类看到的光的波长在 400~760nm。 人眼内有三种视锥细胞，这三种细胞分别用来识别三种颜色：红绿蓝（RGB） HSL 和 HSV Hue： 色相（将颜色分成一个色盘，然后我们通过制定一个色盘中的角度，来决定他的颜色） Ssturation：纯度 Lightness： 亮度（到达 100 是白色，到达 0 是黑色，中间的才是纯色） Value：明度 （value 到达 100%时，就相当于是一个纯色） （HSL： W3C 采用的标准） 绘制几何图形 border box-shadow border-radius 文字 font text-decoration 位图 background-image","categories":[],"tags":[]},{"title":"CSS排版","slug":"yuque/CSS排版","date":"2020-12-20T23:28:21.000Z","updated":"2021-02-04T06:02:38.083Z","comments":true,"path":"2020/12/21/yuque/CSS排版/","link":"","permalink":"https://blog.lqh.kim/2020/12/21/yuque/CSS%E6%8E%92%E7%89%88/","excerpt":"","text":"盒（Box) HTML 代码中可以书写开始标签，结束标签，和自封闭标签一对起止标签，表示一个元素DOM 树中存储的是元素和其他类型的节点（Node)CSS 选择器选中的是元素CSS 选择器选中的元素，在排版时可能产生多个盒排版和渲染的基本单位是盒 盒模型盒模型分为两种： 可以通过 box-sizing 来设置不同的盒模型box-sizing 默认值是 content-box 怪异盒模型（border-box)： box-width = content + padding + border 标准盒模型 (content-box)： box-width = content 标准盒模型在增加 padding 和 border 的宽度时，会保持原有的 box-width 而去对应减少 content 的 width 的所占空间 正常流正常流的排版： 收集盒和文字进行计算 计算盒和文字在行中的排布 计算行的排布 IFC：行内级格式化上下文（从左到右排列）BFC：块级格式化上下（从上到下排列） 正常流的行级排布（IFC）Baseline下图中黄色的线就是基线，文字是基于基线来对齐的。 Text底层软件定义的文字 origin：基线的原点 advance：排版中文字占据的空间 bearingX：文字之间的间距 yMin：文字基线距离文字底部的距离 行模型 base-line：基线，文字默认对齐的线 text-top、text-bottom：文字的上下边缘线 只要字体的大小不变，text-top 和 text-bottom 就是不变的如果用了多种字体混排的话，那么这个文字的上下边缘就是有 font-size 最大的字体决定的。我们基本可以认为这两条线是固定不变的 line-top、line-bottom：行的上下边缘线 这两条线的产生是因为行高大于文字的高度 文字和盒混排时产生的问题当一个行内盒是按照 text-bottom 来对齐的话，它就会撑开该行的高度，造成偏移的情况。 当没有蓝色的行内盒的时候，只有文字那么该盒是只有 text-top 和 text-bottom 的高度时，文字看起来排版就比较正常，但是当蓝色盒子出现的时候撑开了 line-top，导致该行整体高度都被撑开了，那么文字相较之前的就会看起来偏下了许多。 Eg： 123456789101112&lt;div style=&quot;font-size: 50px; line-height: 100px; background-color: bisque&quot;&gt; &lt;span&gt;Hello good 国&lt;/span&gt; &lt;div style=&quot; display: inline-block; line-height: 70px; width: 100px; height: 150px; background-color: cadetblue; &quot; &gt;&lt;/div&gt;&lt;/div&gt; 效果如下：文字正常情况按照基线对齐：当我们添加一个行内盒的时候：蓝色的线是 line-top，就被撑开了（该行的整体高度被撑开）。绿色的线是 text-top，行内盒不会影响 text 的边缘线高度。当我们在行内盒添加上一个文字时：这种情况就相当于，当一个行内盒中有了文字之后，那么对齐的时候就会按照文字的基线去对齐当我们呢在行内盒再添加一个换行和文字时：会按照最下面文字的基线去进行对齐上面的演示代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;div style=&quot;font-size: 50px; line-height: 100px; background-color: bisque&quot;&gt; &lt;!-- line-top --&gt; &lt;div style=&quot; vertical-align: top; width: 1px; height: 1px; display: inline-block; &quot; &gt; &lt;div style=&quot;width: 100vw; height: 1px; background-color: blue&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- text-top --&gt; &lt;div style=&quot; vertical-align: text-top; width: 1px; height: 1px; display: inline-block; &quot; &gt; &lt;div style=&quot;width: 100vw; height: 1px; background-color: green&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 基线 --&gt; &lt;div style=&quot; vertical-align: baseline; width: 1px; height: 1px; display: inline-block; &quot; &gt; &lt;div style=&quot;width: 100vw; height: 1px; background-color: red&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- text-bottom --&gt; &lt;div style=&quot; vertical-align: text-bottom; width: 1px; height: 1px; display: inline-block; &quot; &gt; &lt;div style=&quot;width: 100vw; height: 1px; background-color: green&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- line-bottom --&gt; &lt;div style=&quot; vertical-align: bottom; width: 1px; height: 1px; display: inline-block; &quot; &gt; &lt;div style=&quot;width: 100vw; height: 1px; background-color: blue&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;span&gt;Hello good 国&lt;/span&gt; &lt;div style=&quot; display: inline-block; line-height: 70px; width: 100px; height: 150px; background-color: cadetblue; &quot; &gt; M N &lt;/div&gt;&lt;/div&gt; 正常流的块级排布（BFC)float 和 clearfloat： 严格来说是已经脱离文档流的，他在排列时可以完成图文环绕排的形式。 多个 float 元素会依次排列，不会占据对方的空间 float 会造成重排的问题 clear：与其说是清除浮动，不如说是在某个方向上找个干净的地方去完成浮动的排列 与上面同样的代码，只要给第二个 float 的红色 div 设置 clear: right 就可以实现下面这种效果 所以说 clear 更像是在右面找了一个干净的地方进行浮动排列 margin 折叠这种现象只会发生在正常流中，在正常流中只有 BFC 才会有！ 上下两个块级元素都有 margin 的情况下，在排列的时候会选取一个 margin 的最大值作为其最终排版的结果 =====&gt; BFC 合并 Block Container： 里面有 BFC 能容纳正常流的盒，里面就有 BFC BLock-level Box： 外面有 BFC 的 Block Box = Block container + Block-level Box：里外都有 BFC 的","categories":[],"tags":[]},{"title":"Pseudo-element: 伪元素","slug":"yuque/Pseudo-element! 伪元素","date":"2020-12-20T11:07:45.000Z","updated":"2021-02-04T06:02:38.095Z","comments":true,"path":"2020/12/20/yuque/Pseudo-element! 伪元素/","link":"","permalink":"https://blog.lqh.kim/2020/12/20/yuque/Pseudo-element!%20%E4%BC%AA%E5%85%83%E7%B4%A0/","excerpt":"","text":"::before ::after ::first-line 选中第一行 ::first-letter 选中第一个字母 1234&lt;div&gt; &lt;::before/&gt; content content content content content content content content &lt;::after/&gt;&lt;/div&gt; 1234&lt;div&gt; &lt;::first-letter&gt;c&lt;/::first-letter&gt;ontent content content content content content content content&lt;/div&gt; first-line 和 first-letter 支持的 css 属性设置：","categories":[],"tags":[]},{"title":"Calculating specificity：计算优先级","slug":"yuque/Calculating specificity：计算优先级","date":"2020-12-20T00:34:25.000Z","updated":"2021-02-04T06:02:38.123Z","comments":true,"path":"2020/12/20/yuque/Calculating specificity：计算优先级/","link":"","permalink":"https://blog.lqh.kim/2020/12/20/yuque/Calculating%20specificity%EF%BC%9A%E8%AE%A1%E7%AE%97%E4%BC%98%E5%85%88%E7%BA%A7/","excerpt":"","text":"计算方法为给定元素计算它的优先级，遵循以下原则： 计算 ID 选择器的值 A 计算类选择、属性选择器、伪类选择器的值 B 计算标签选择器和伪元素选择器的值 C 忽略通用选择器* :is()、:not()、:has(),这三个伪类选择器的计算值将被其中优先级最高的值所代替 eg::is(#id) [1,0,0] 伪类的优先级值 B 被 id 的高优先值所代替 类似的, :nth-child()、：nth-last-child()的计算值是一个伪类的值加上参数的计算值之和。 eg::nth-child(.item) [0,2,0] 伪类的值加上参数.item 的值 :where() 伪类的计算值为 0 eg:.item:where(em,#foo) [0,1,0] where 伪类的值为 0 【A，B，C】 /_ a=0 b=0 c=0 /LI / a=0 b=0 c=1 /UL LI / a=0 b=0 c=2 /UL OL+LI / a=0 b=0 c=3 _/H1 + [REL=up] / a=0 b=1 c=1 /UL OL LI.red / a=0 b=1 c=3 /LI.red.level / a=0 b=2 c=1 /#x34y / a=1 b=0 c=0 /#s12:not(FOO) / a=1 b=0 c=1 /.foo :is(.bar, #baz) / a=1 b=1 c=0 */ 官方文档是按照 3 位来计算优先级的，就是上图中的：[A, B, C]还有一种计算方式是按照四位来计算的，最高位表示是否为行内样式：[ L, A, B, C] 练习1234div#a.b .c[id=x] [0, 1, 3, 1]#a:not(#b) [0, 2, 0, 0]*.a [0, 0, 1, 0]div.a [0, 0, 1, 1]","categories":[],"tags":[]},{"title":"Pseudo-Class：伪类","slug":"yuque/Pseudo-Class：伪类","date":"2020-12-20T00:33:41.000Z","updated":"2021-02-04T06:02:38.143Z","comments":true,"path":"2020/12/20/yuque/Pseudo-Class：伪类/","link":"","permalink":"https://blog.lqh.kim/2020/12/20/yuque/Pseudo-Class%EF%BC%9A%E4%BC%AA%E7%B1%BB/","excerpt":"","text":"链接/行为之前这些伪类的实现都是为了超链接设计的，但是现在有很多伪类都可以用到其他元素上了。 :any-link 任何超链接 :link 没有访问过的超链接 :visited 已经访问过的超链接 any-link 可以看做是 link 和 visited 的结合Tips：一旦使用了 link 或者 visited 伪类之后，就没有办法去修改除了颜色以外的 css 属性了。这样做是为了浏览器安全考虑的。因为一旦你更改了像 visited 超链接的大小的时候，就可以让别人明显感受到你访问过哪些网站，这对于用户来说是不太容易接受的，就像泄漏了隐私一样，也不符合浏览器安全的相关策略。 :hover :active :focus :target 树结构 :empty :nth-child() 从前让后数 :nth-last-child() 从后往前数 :first-child :last-child :only-child 逻辑型 :not 伪类 :where :has 在 css 书写过程中，我们不应该写过于复杂的选择器，这样一是对性能不好，二是可能自己 HTML 结构设计的有问题。","categories":[],"tags":[]},{"title":"Selector: 选择器","slug":"yuque/Selector! 选择器","date":"2020-12-20T00:28:48.000Z","updated":"2021-02-04T06:02:38.155Z","comments":true,"path":"2020/12/20/yuque/Selector! 选择器/","link":"","permalink":"https://blog.lqh.kim/2020/12/20/yuque/Selector!%20%E9%80%89%E6%8B%A9%E5%99%A8/","excerpt":"","text":"选择器简单选择器 - div、svg、a .class #id [attr=value] :hover ::before 复合选择器 &lt;简单选择器&gt;&lt;简单选择器&gt;&lt;简单选择器&gt; 或者 div 必须写在最前面 复杂选择器 &lt;复合选择器&gt;&lt;复合选择器&gt; &lt;复合选择器&gt;”&gt;”&lt;复合选择器&gt; &lt;复合选择器&gt;”~”&lt;复合选择器&gt; &lt;复合选择器&gt;”+”&lt;复合选择器&gt; &lt;复合选择器&gt;”||”&lt;复合选择器&gt;","categories":[],"tags":[]},{"title":"翻译记录","slug":"yuque/翻译记录","date":"2020-12-14T23:42:53.000Z","updated":"2021-02-04T06:02:38.187Z","comments":true,"path":"2020/12/15/yuque/翻译记录/","link":"","permalink":"https://blog.lqh.kim/2020/12/15/yuque/%E7%BF%BB%E8%AF%91%E8%AE%B0%E5%BD%95/","excerpt":"","text":"Selectors Level 4Selector syntax(选择器语法）一个选择器是由一个或者多个简单选择器序列组合而成的，他们通过连接符（Combinators）分割开。并且在一个选择器中的最后一个简单选择器的末尾可以添加一个伪元素。 简单选择器序列（sequences of simple selectors)：由一连串没有使用连接符（Combinators）分割开来的简单选择器组合而成。通常是由标签选择器（h1、div）和通用选择器（*）作为开头。在简单选择器序列中不允许其他的标签选择器或者是通用选择器。 简单选择器（simple selectors）： 标签选择器(h1) 通用选择器(*) 属性选择器（[]) 类选择器(.) id 选择器(#) 伪类选择器（::) 连接符（Combinators）： whitespace 空格 - ~ Calculating a selector’s specificity(计算选择器的优先级）为给定元素计算它的优先级，遵循以下原则： 计算 ID 选择器的值 A 计算类选择、属性选择器、伪类选择器的值 B 计算标签选择器和伪元素选择器的值 C 忽略通用选择器* :is()、:not()、:has(),这三个伪类选择器的计算值将被其中优先级最高的值所代替 eg::is(#id) [1,0,0] 伪类的优先级值 B 被 id 的高优先值所代替 类似的, :nth-child()、：nth-last-child()的计算值是一个伪类的值加上参数的计算值之和。 eg::nth-child(.item) [0,2,0] 伪类的值加上参数.item 的值 :where() 伪类的计算值为 0 eg:.item:where(em,#foo) [0,1,0] where 伪类的值为 0 【A，B，C】 /_ a=0 b=0 c=0 /LI / a=0 b=0 c=1 /UL LI / a=0 b=0 c=2 _/ UL OL+LI /_ a=0 b=0 c=3 _/ H1 + [REL=up] / a=0 b=1 c=1 */ UL OL LI.red /_ a=0 b=1 c=3 _/ LI.red.level /_ a=0 b=2 c=1 _/ #x34y /_ a=1 b=0 c=0 _/ #s12:not(FOO) /_ a=1 b=0 c=1 _/ .foo :is(.bar, #baz) /_ a=1 b=1 c=0 _/ Grammar","categories":[],"tags":[]},{"title":"CSS结构","slug":"yuque/CSS结构","date":"2020-12-13T23:30:32.000Z","updated":"2021-02-04T06:02:38.227Z","comments":true,"path":"2020/12/14/yuque/CSS结构/","link":"","permalink":"https://blog.lqh.kim/2020/12/14/yuque/CSS%E7%BB%93%E6%9E%84/","excerpt":"","text":"因为找不到一个明确的语法线索，所以我们这里根据 2.1 版本的语法来进行学习。现版本 css 多了很多 css3 的语法，但是不影响我们理解他的语法结构。 CSS2.1 语法 css2.1Grammar 中文对照版 总体结构一个样式文件从上到下的顺序结构： @charset @charset &#39;UTF-8&#39;; 声明 css 文件的字符编码标准。 必须在样式表的第一行声明 如果有多个@charset 声明，那么只有第一个会生效 无法在 HTML 的 style 标签里使用该 at-rule 规则 Tip:在样式表中声明字符编码有很多种方式，浏览器会按照以下顺序去尝试确定文件的编码方式（只要找到一种就会停止并得出结果）： 文件开头的 Unicode byte-order 字符值 由 Content-type 确定：HTTP 协议中的 charset 属性给出的值或用于提供样式表的协议中的等效值 CSS @rule 规则：@charset 假设文档上是 UTF-8 的格式 @import rules （这部分是我们日常最常用到的部分） @media @page rule CSS 规则的结构1234div /* selector */ &#123; /* key */ background-color: /* value */ red;&#125; 由上面的 css 代码可以明确 css 规则的结构分为以下两个部分： Selector（选择器） Declare（声明） key value 爬取 w3c 的 css 规则123456789JSON.stringify( Array.prototype.slice .call(document.querySelector(&quot;#container&quot;).children) .filter((e) =&gt; e.getAttribute(&quot;data-tag&quot;).match(/css/)) .map((e) =&gt; (&#123; name: e.children[1].children[0].innerText, url: e.children[1].children[0].href, &#125;))); 思维导图","categories":[],"tags":[]},{"title":"链表篇","slug":"yuque/链表篇","date":"2020-12-10T06:10:05.000Z","updated":"2021-02-04T06:02:38.255Z","comments":true,"path":"2020/12/10/yuque/链表篇/","link":"","permalink":"https://blog.lqh.kim/2020/12/10/yuque/%E9%93%BE%E8%A1%A8%E7%AF%87/","excerpt":"","text":"本次升级之路分模块，逐个击破。 反转链表 题解 这是个经典的链表问题，其实这个问题的关键就在于要提前保存下一个节点的值。 因为你在让当前节点指向上一个节点的过程中，就会把当前节点的 next 指向改变，如果不提前保存当前节点的 next 值的话，就会找不到原有的当前节点的 next 值。 迭代大法 时间复杂度：O(n) 空间复杂度：O(1) 123456789101112131415161718192021222324252627/** * Definition for singly-linked list. * function ListNode(val) &#123; * this.val = val; * this.next = null; * &#125; *//** * @param &#123;ListNode&#125; head * @return &#123;ListNode&#125; */const reverList = (head) =&gt; &#123; let cur = head; let prev = null; let tmp; while (cur) &#123; // 记录当前节点的下一个节点 tmp = cur.next; // 改变当前节点的next指针指向 cur.next = prev; // 更新上一个节点的值 prev = cur; // 更新当前节点 cur = tmp; &#125; return prev;&#125;; 递归方法 时间复杂度：O(n) 空间复杂度：O(1) 1234567891011const reverList = (head) =&gt; &#123; const rever = (prev, cur) =&gt; &#123; // 严谨性判断，当cur为空时链表翻转结束 if (!cur) return prev; // 提前保存上一个节点的值 const tmp = cur.next; cur.next = prev; return rever(cur, tmp); &#125;; return rever(null, head);&#125;;","categories":[],"tags":[]},{"title":"线性表","slug":"yuque/线性表","date":"2020-12-10T01:47:27.000Z","updated":"2021-02-04T06:02:38.319Z","comments":true,"path":"2020/12/10/yuque/线性表/","link":"","permalink":"https://blog.lqh.kim/2020/12/10/yuque/%E7%BA%BF%E6%80%A7%E8%A1%A8/","excerpt":"","text":"概念线性表是 n 个元素的有限序列，最常用的是链式表达式，通常也叫作线性链表或者链表。**在链表中存储的数据元素也叫作*节点，\\*一个节点存储的就是一条数据记录。每个节点的结构包括两个部分： 具体的数据值 指向下一个节点的指针 在链表的最前面通常有一个头指针用来指向第一个节点。对于链表的最后一个节点，由于在他之后没有下一个节点，因此它的指针是一个空指针。** 单向链表 如上图所示：只能通过上一个节点的指针找到下一个节点，而不能通过下一个节点去找到上一个节点 循环链表 让最后一个元素的指针指向第一个元素，就形成了循环链表 双向链表 给每个元素增加一个指向上一个元素的指针就形成了双向链表双向链表可以通过自身查找到上一个元素，也可以查找到下一个元素 双向循环链表 同样的还可以将双向链表和循环链表相结合，形成双向循环链表 单向链表的增删查增当我们想要在一个链表A节点和B节点的中间增加节点C时，需要进行以下两步： 使 C 节点的 net 等于 A 节点的 next 改变 A 节点的 next 等于 C 节点 第一步和第二步的顺序不能调换，如果先执行第一步的话，那么就没办法获取到指向 B 节点的指针了，除非是新建一个变量提前缓存该指针 12C.next = A.next;A.next = C; 删当我们想要在一个链表中删除B节点时，需要进行以下一步： 使 A 的 next 等于 B 的 next 这里需要注意，A.next = B， 所以我们在处理这一步的时候，完全可以写成 A.next = A.next.next ; 1A.next = A.next.next; 查链表这种数据结构对于查找操作来说是弱项。因为链表的查找只能从第一个节点开始，逐个查找。 通过上面的增删查操作我们可以明显感知到，链表这种数据结构在增、删的操作上是比较方便的，可以在O(1)的时间复杂度内完成，但是查的话就是O(n)的时间复杂度了。但是链表在增删上的优势并不明显，因为我们在增删的时候往往会伴随着查找的动作，比如我们在第五个节点后面添加一个新的节点，就会有这样的过程： 查找到链表中的第 5 个节点 在他后面新增节点 那这么说链表就没什么用了吗？ 当然不是，链表的真正价值在于它存储的数据方式是按照顺序进行关联存储的，如果对于元素个数不确定，并且经常进行增删的数据来说，链表是比较合适的 链表在内存中可以存储在不连续的内存空间内因为链表的顺序关联是通过指针进行关联的所以对于不确定元素个数的数据来说，存储在内存空间中的各个位置，然后通过 next 指针关联是较好的 对于元素个数确定的数据，那么数组就是比较好的选择了 数组在内存中开辟的是一块固定的连续内存空间","categories":[],"tags":[]},{"title":"useCallback","slug":"yuque/useCallback","date":"2020-12-08T03:31:06.000Z","updated":"2021-02-04T06:02:38.323Z","comments":true,"path":"2020/12/08/yuque/useCallback/","link":"","permalink":"https://blog.lqh.kim/2020/12/08/yuque/useCallback/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Toy-Brower","slug":"yuque/Toy-Brower","date":"2020-12-02T13:38:57.000Z","updated":"2021-02-04T06:02:38.375Z","comments":true,"path":"2020/12/02/yuque/Toy-Brower/","link":"","permalink":"https://blog.lqh.kim/2020/12/02/yuque/Toy-Brower/","excerpt":"","text":"为了更加了解浏览器的工作原理，我们来自己用代码搞一个浏览器玩一下。 基本功能描述 功能实现HTTP 实现为了实现浏览器发送网络请求的这一部分，需要梳理一下这部分所需要的功能。 构建请求信息（请求方法、请求行、请求头、请求体） 建立网络连接（net.createServer()） 接收响应结果 处理响应结果 处理响应头 处理响应体 - 利用单独的子类进行 body text 的处理 构造一个发送请求的类 Request 思考：这个类都需要什么东西？ 首先需要一些发送请求时需要配置的基本配置项（options） url 请求路径 port 请求端口 method 请求方法 headers 请求头 body 请求体 其次需要一个发送该请求的方法（send） 该方法返回一个 promise 对象，该对象是请求回来的结果 该方法的功能： 构造请求并发送，发送前需要拼接上请求行、请求头、换行、请求体等信息。 接受请求结果 构造一个解析响应的类 ResponseParse response 返回的结果需要分段来进行处理，所以我们需要一个 ResponseParse 来进行装配 ResponseParse 来分段处理返回的结果，我们用有限状态机来记录完成这一个过程 针对 response body 中的内容采用另一个方法进行分段解析 构造一个类 TrunkedBodyParser response body 针对不通的 Content-type 类型会有不同的处理方法 我们这里针对 chunk 类型进行解析 HTML 解析的实现 接收响应体进行解析 构造状态机进行标签解析 开始标签 &lt; 开始标签的标志 /n/t 空格标志后面是标签属性 结束标签 / 结束标签的标志 &gt; 标签解析结束，开始下一个标签解析 自封闭标签 &lt;/ 自闭和标签的标志 利用 currentToken 变量接受解析结果 text文本类型 statTag开始标签类型 endTag结束标签类型 isSelfCloseTag自闭和标签标志 每次当前标签结束时需要emit(currentToken)来触发当前标签结束的事件 解析标签属性 氛围 attributeName 和 value 两部分进行解析 解析完成之后 emit 对应数据 构建 DOM 树 使用栈进行构造 遇到开始标签就处理好相关属性和元素名入栈 遇到自闭和标签就相当入栈后立即出栈 遇到闭合标签就找到对应标签出栈 CSS 计算 遇到 style 标签时，将 css 规则保存起来，使用 css parser 解析规则 当创建一个元素后应立即计算 css 理论上当我们分析一个元素时，是假设这个元素的 css 规则已经全部收集完毕的 在 computedCss 函数中，我们需要知道所有元素的父元素才可以去判断元素是否与规则匹配 由于我们首先获取的是当前元素，所以我们获得和计算父元素匹配的顺序是由内到外的 选择器也是由内向外匹配排列的 根据选择器的类型和元素属性，计算是否当前的元素匹配 元素匹配完成就应用选择器到元素上，形成 computedSty css 规则具有优先级，我们利用 specificity 特征去进行判断比较 specificity 是一个四元组，越左边权重越重 [0,0,0,] inline、id、class、tag css 规则的 specificity 是根据所包含的简单选择器相加形成的","categories":[],"tags":[]},{"title":"代码效率优化方法论","slug":"yuque/代码效率优化方法论","date":"2020-12-02T01:26:57.000Z","updated":"2021-02-04T06:02:38.415Z","comments":true,"path":"2020/12/02/yuque/代码效率优化方法论/","link":"","permalink":"https://blog.lqh.kim/2020/12/02/yuque/%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E8%AE%BA/","excerpt":"","text":"如何衡量一段代码的优劣呢？一般我们会从两个维度去考虑一段代码的质量： 时间复杂度 空间复杂度 顾名思义，其实时间复杂度就是说这段代码的计算量所能消耗的时间，而空间复杂度就是这段代码所占据的内存空间。那么我们应该怎么取舍这两个标准呢？ 提高代码效率的方法我们从上面已经知道了衡量代码效率的方法，那么我们应该怎么着手去优化提高我们代码的效率呢？ 总的策略就是降低代码的时间复杂度和空间复杂度。 但是对于一段代码来说往往时间和空间两个是互斥的，如果我们想要降低时间复杂度，那么无疑就会增加空间复杂度。举一个生活中的 🌰，就像我们平时生活中开车过红绿灯，如果只有这一条路（空间）那么我们就只能在这等着红灯，当车越来越多的时候，就会消耗大家很多时间，但是当我们修建了立交桥之后，就会有更多的选择空间，就会大大减少等待红灯的时间。（图片来自拉钩教育-公瑾老师的重学算法与数据结构一课中）而对我们来说，时间永远都要比空间更加重要，因为时间拿钱买不来，而空间我们起码可以拿钱来进行扩容。空间是廉价的，时间是昂贵的 暴力解法：在没有任何时间和空间的限制下，将目标达成 剔除无效操作：将代码中没有必要的计算、无效的存储删除来优化时间和空间复杂度 时空转换：设计合理的数据结构，将时间向空间转换 增删查：数据的基本操作一般一段算法的实现最常设计的三个操作就是：增、删、查。而我们对一个算法的优化和实现只要围绕这三个为重心去思考展开即可： 分析这段代码对数据进行了那些操作 这些操作中有哪些操作是最消耗性能的，对时间复杂度的损耗是最高的？ 考虑有哪种数据结构可以帮助提高数据操作的使用效率。 以上三点就是构成我们实现代码效率优化的方法论。 查 按照元素索引查找 对于数组这些天生拥有索引的数据结构来说十分简单 对于链表这种，通过指针进行连接的就需要知道前面一个元素 按照元素特征值查找 对于字典类型的数据来说，key 就相当是特征，value 就是值，查找起来非常方便 对于数组和链表来说就需要循环对比每个元素来进行比较值的特征是否符合 增 在复杂数据结构的末尾添加数据 不会影响数据的原始位置 在复杂数据结构的中间添加数据 会影响到数据原始的位置 删 在复杂数据结构的末尾删除 不会影响到原先数据的位置 在复杂数据结构的中间位置进行删除 会影响到之前数据的原始位置","categories":[],"tags":[]}],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://blog.lqh.kim/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}]}